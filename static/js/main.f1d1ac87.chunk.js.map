{"version":3,"sources":["ring.svg","components/Store.js","components/Pagination.js","components/Filtering.js","components/Table.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","stateContext","createContext","loadingContext","errorContext","dataPreparingContext","Store","children","useState","loading","setLoading","error","setError","dataPreparing","setDataPreparing","finalState","setFinalState","useEffect","axios","get","then","response","data","newIdArray","incomeDataFetch","catch","array","Object","values","map","element","id","arrayID","dataState","finalScores","todayDate","Date","todayMonth","getMonth","todayYear","getFullYear","responses","i","counter","totalIncome","incomes","reduce","total","currentValue","parseFloat","value","averageIncome","lastMonthIncome","date","dateMonth","dateYear","toFixed","length","Promise","all","Provider","Pagination","rowsPerPage","totalRows","paginate","currentPage","pageNumbers","Math","ceil","push","getPageIndicator","number","undefined","className","key","href","onClick","Filtering","setFilterWord","setCurrentPage","type","placeholder","onChange","e","target","Table","state","useContext","setData","sortDirection","setSortDirection","fieldToSort","setFieldToSort","filterWord","sortByField","field","sortedData","slice","sort","a","b","getSortIndicator","filteredData","filter","toString","search","toLowerCase","name","city","filterList","src","loader","alt","height","width","pageNumber","indexOfLastRow","indexOfFirstRow","currentRows","renderTableData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f1d1ac87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.4c461beb.svg\";","import React, {createContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst Store = ({children}) => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [dataPreparing, setDataPreparing] = useState(true);\n\n    const [finalState, setFinalState] = useState({});\n\n\n    useEffect(() => {\n        axios\n            .get(\"https://recruitment.hal.skygate.io/companies\")\n            .then((response) => {\n                setLoading(false);\n                setError(\"\");\n                return response.data;\n            })\n            .then((data) => {\n                const dataArray = newIdArray(data);\n                return [dataArray, data];\n            })\n            .then((data) => {\n                incomeDataFetch(data[0], data[1]);\n            })\n            .catch(() => {\n                setLoading(false);\n                setFinalState(\"\");\n                setError(true);\n            });\n    }, []);\n\n    const newIdArray = (array) => {\n        return Object.values(array).map((element) => element.id);\n    };\n\n    const incomeDataFetch = (arrayID, dataState) => {\n        const finalScores = dataState;\n        const todayDate = new Date();\n        const todayMonth = todayDate.getMonth() + 1;\n        const todayYear = todayDate.getFullYear();\n        const responses = [];\n\n        for (let i = 0; i <= arrayID.length - 1; i++) {\n            let counter = arrayID[i];\n\n            responses[i] = axios\n                .get(`https://recruitment.hal.skygate.io/incomes/${counter}`)\n                .then((response) => {\n                    if (!response.data) {\n                        return;\n                    }\n                    //setting total income\n                    const totalIncome = Object.values(response.data.incomes).reduce(\n                        (total, currentValue) => {\n                            currentValue = parseFloat(currentValue.value);\n                            return total + currentValue;\n                        },\n                        0\n                    );\n\n                    //setting average income\n                    const averageIncome = totalIncome / 12;\n\n                    //setting last month income\n                    const lastMonthIncome = Object.values(response.data.incomes).reduce(\n                        (total, currentValue) => {\n                            //setting dates to sum last month income\n                            const date = new Date(currentValue.date);\n                            const dateMonth = date.getMonth() + 1;\n                            const dateYear = date.getFullYear();\n\n                            if (todayMonth - dateMonth === 3 && todayYear === dateYear) {\n                                total += parseFloat(currentValue.value);\n                            }\n                            return total;\n                        },\n                        0\n                    );\n\n                    finalScores[i].totalIncome = parseFloat(totalIncome.toFixed(2));\n                    finalScores[i].averageIncome = parseFloat(averageIncome.toFixed(2));\n                    finalScores[i].lastMonthIncome = parseFloat(\n                        lastMonthIncome.toFixed(2)\n                    );\n                })\n                .catch(() => {\n                    setError(true);\n                });\n        }\n\n        Promise.all(responses).then(() => {\n            setFinalState(finalScores);\n            setDataPreparing(false);\n        });\n    };\n\n    return (\n        <errorContext.Provider value={error}>\n            <dataPreparingContext.Provider value={dataPreparing}>\n                <stateContext.Provider value={finalState}>\n                    <loadingContext.Provider value={loading}>\n                        {children}\n                    </loadingContext.Provider>\n                </stateContext.Provider>\n            </dataPreparingContext.Provider>\n        </errorContext.Provider>\n    );\n};\n\nexport const stateContext = createContext();\nexport const loadingContext = createContext();\nexport const errorContext = createContext();\nexport const dataPreparingContext = createContext();\nexport default Store;\n","import React from \"react\";\nimport \"../Pagination.css\";\n\nfunction Pagination({rowsPerPage, totalRows, paginate, currentPage}) {\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(totalRows / rowsPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    const getPageIndicator = (number) => {\n        return number === currentPage ? \"active\" : undefined;\n    };\n\n    return (\n        <div className=\"pagination\">\n            {\" \"}\n            <p>Page:</p>\n            {pageNumbers.map((number) => (\n                <a\n                    key={number}\n                    href=\"javascript:;\"\n                    onClick={() => paginate(number)}\n                    className={getPageIndicator(number)}\n                >\n                    {number}\n                </a>\n            ))}\n        </div>\n    );\n}\n\nexport default Pagination;\n","import React from \"react\";\nimport \"../Filtering.css\";\n\nfunction Filtering({setFilterWord, setCurrentPage}) {\n    return (\n        <div className=\"filtering\">\n            <p>Filter your data here: </p>\n            <input\n                type=\"text\"\n                placeholder=\"\"\n                onChange={(e) => {\n                    setFilterWord(e.target.value);\n                    setCurrentPage(1)\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Filtering;\n","import React, {Fragment, useContext, useEffect, useState} from \"react\";\nimport {dataPreparingContext, errorContext, stateContext} from \"./Store\";\nimport Pagination from \"./Pagination\";\nimport \"../Table.css\";\nimport loader from \"../ring.svg\";\nimport Filtering from \"./Filtering\";\n\nfunction Table() {\n    const state = useContext(stateContext);\n    const error = useContext(errorContext);\n    const dataPreparing = useContext(dataPreparingContext);\n\n    const [data, setData] = useState(state);\n\n    const [sortDirection, setSortDirection] = useState(\"ascending\");\n    const [fieldToSort, setFieldToSort] = useState(null);\n\n    const [filterWord, setFilterWord] = useState();\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [rowsPerPage] = useState(20);\n\n    //sorting\n\n    const sortByField = (field) => {\n        setFieldToSort(field);\n        let sortedData = data.slice().sort((a, b) => {\n            if (a[field] < b[field]) {\n                return sortDirection === \"ascending\" ? -1 : 1;\n            }\n            if (a[field] > b[field]) {\n                return sortDirection === \"ascending\" ? 1 : -1;\n            }\n            return 0;\n        });\n        setData(sortedData);\n\n        sortDirection === \"ascending\"\n            ? setSortDirection(\"descending\")\n            : setSortDirection(\"ascending\");\n    };\n\n    const getSortIndicator = (field) => {\n        return field === fieldToSort ? sortDirection : undefined;\n    };\n\n    //filtering\n\n    const filterList = (array) => {\n        let filteredData = Object.values(array);\n        filteredData = filteredData.filter((data) => {\n            return (\n                data.id.toString().search(filterWord.toLowerCase()) !== -1 ||\n                data.name.toLowerCase().search(filterWord.toLowerCase()) !== -1 ||\n                data.city.toLowerCase().search(filterWord.toLowerCase()) !== -1 ||\n                data.totalIncome.toString().search(filterWord.toLowerCase()) !== -1 ||\n                data.averageIncome.toString().search(filterWord.toLowerCase()) !== -1 ||\n                data.lastMonthIncome.toString().search(filterWord.toLowerCase()) !== -1\n            );\n        });\n        setData(filteredData);\n    };\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    const renderTableData = () => {\n        //pagination\n        const indexOfLastRow = currentPage * rowsPerPage;\n        const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n        const currentRows = data.slice(indexOfFirstRow, indexOfLastRow);\n\n        return Object.values(currentRows).map((data) => {\n            const {\n                id,\n                name,\n                city,\n                totalIncome,\n                averageIncome,\n                lastMonthIncome,\n            } = data;\n\n            return (\n                <tr key={`row ${id}`}>\n                    <td key={`${id}.${id}`}>{id}</td>\n                    <td key={`${id}.${name}`}>{name}</td>\n                    <td key={`${id}.${city}`}>{city}</td>\n                    <td key={`${id}.${totalIncome}`}>{totalIncome}</td>\n                    <td key={`${id}.${averageIncome}`}>{averageIncome}</td>\n                    <td key={`${id}.${lastMonthIncome}`}>{lastMonthIncome}</td>\n                </tr>\n            );\n        });\n    };\n\n    useEffect(() => {\n        filterList(state);\n    }, [filterWord]);\n\n    useEffect(() => {\n        if (state[0]) {\n            setData(state);\n        }\n    }, [state]);\n\n    //preventing from render when server doesn't respond\n    if (error) {\n        return (\n            <div>\n                <p>Retrieving data was unsuccessful. Check internet connection.</p>\n            </div>\n        );\n    }\n\n    //preventing from render when data is not prepared yet\n    if (dataPreparing) {\n        return (\n            <div>\n                <img src={loader} alt=\"ball\" height=\"100px\" width=\"100px\"/>\n                <p>Preparing your data. Please wait.</p>\n            </div>\n        );\n    }\n\n    return (\n        <Fragment>\n            <div className=\"tableContainer\">\n                <div>\n                    <Filtering\n                        setFilterWord={setFilterWord}\n                        setCurrentPage={setCurrentPage}\n                    />\n                    <Pagination\n                        rowsPerPage={rowsPerPage}\n                        totalRows={state.length}\n                        paginate={paginate}\n                        currentPage={currentPage}\n                    />\n                </div>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"id\")}\n                                className={getSortIndicator(\"id\")}\n                            >\n                                ID\n                            </button>\n                        </th>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"name\")}\n                                className={getSortIndicator(\"name\")}\n                            >\n                                Name\n                            </button>\n                        </th>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"city\")}\n                                className={getSortIndicator(\"city\")}\n                            >\n                                City\n                            </button>\n                        </th>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"totalIncome\")}\n                                className={getSortIndicator(\"totalIncome\")}\n                            >\n                                Total Income\n                            </button>\n                        </th>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"averageIncome\")}\n                                className={getSortIndicator(\"averageIncome\")}\n                            >\n                                Average Income\n                            </button>\n                        </th>\n                        <th>\n                            <button\n                                type=\"button\"\n                                onClick={() => sortByField(\"lastMonthIncome\")}\n                                className={getSortIndicator(\"lastMonthIncome\")}\n                            >\n                                Last Month Income\n                            </button>\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>{renderTableData()}</tbody>\n                </table>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Table;\n","import React, {} from 'react';\nimport '../App.css';\nimport Store from \"./Store\";\nimport Table from \"./Table\";\n\n\nfunction App() {\n    return (\n        <Store>\n            <div className=\"App\">\n                <header className=\"appHeader\">\n                    <h1>Table of data</h1>\n                </header>\n                <Table/>\n            </div>\n        </Store>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}